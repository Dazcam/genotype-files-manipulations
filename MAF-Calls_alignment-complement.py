#!/usr/bin/python2

"""
This script processes the Calls-MAF aligned file to complement the reverse complemented sequences of MAF and
outputsTab file with the coordinates of new genome.

The Calls-MAF alignment can be produced by merging the MAF alignment in table format (produced by MAFtoTAB.py) with
the Calls file.

The idea is to obtain Calls data generated by mapping to MPGU01* reference for scaffold_* coordinates.
The correspondence between MPGU01* and scaffold_* was obtained by whole genome alignment (MAF).

MAF produce some alignment fragments with complemented strand (-), this script will complement genotypes in such positions
to match the reference of interest (scaffold_).

# input:

Chr Pos REF strand TARG TARGchr TARGpos CHROM POS REF sample1 sample2 sample3
scaffold_1 17055925 A - T MPGU01000001.1 26195 MPGU01000001.1 26195 T T T T
scaffold_1 17055903 T - A MPGU01000001.1 26217 MPGU01000001.1 26217 A A N A
scaffold_1 17055876 A - C MPGU01000001.1 26244 MPGU01000001.1 26244 C C C C
scaffold_1 17055843 T - G MPGU01000001.1 26275 MPGU01000001.1 26275 G G G T
scaffold_1 17055834 C - A MPGU01000001.1 26284 MPGU01000001.1 26284 A - A A
scaffold_1 17055815 T + A MPGU01000001.1 26303 MPGU01000001.1 26303 A A A A
scaffold_1 17055732 T + T MPGU01000001.1 26385 MPGU01000001.1 26385 T K K K
scaffold_1 17055707 G + G MPGU01000001.1 26410 MPGU01000001.1 26410 G G G T

# output:

Chr	Pos	REF	TARG	sample1	sample2	sample3
scaffold_1	17055925	A	A	A	A	A
scaffold_1	17055903	T	T	T	N	T
scaffold_1	17055876	A	G	G	G	G
scaffold_1	17055843	T	C	C	C	A
scaffold_1	17055834	C	T	-	T	T
scaffold_1	17055815	T	A	A	A	A
scaffold_1	17055732	T	T	G	T	G
scaffold_1	17055707	G	G	G	G	T

# command:

$ python MAF-Calls_alignment-complement.py -i MAFCalls.tab -o MAFCalls.out


# contact:

Dmytro Kryvokhyzha dmytro.kryvokhyzha@evobio.eu

"""

############################# modules #############################

import calls # my custom module

############################# options #############################

parser = calls.CommandLineParser()
parser.add_argument('-i', '--input', help = 'name of the input file', type=str, required=True)
parser.add_argument('-o', '--output', help = 'name of the output file', type=str, required=True)
args = parser.parse_args()

############################# program #############################

print('Opening the file...')

counter = 0

with open(args.input) as datafile:
  header_words = datafile.readline().split()

  header = header_words[0:3]+ [header_words[4]] + header_words[10:]
  headerP = '\t'.join(str(e) for e in header)

  print('Creating the output file...')
  outfile = open(args.output, 'w')
  outfile.write('%s\n' % (headerP))

  print('Processing ...')

  for line in datafile:
    words = line.split()
    chrPosRefS = words[0:3]
    strand = words[3]
    alleles = words[9:]

    # check if two TARG reference sequences are equal
    if (words[4] != words[9] or words[5:7] != words[7:9]):
      raise IOError('The two TARG reference sequences are not equal at:\n%s' % line)

    if strand not in "+-":
      raise IOError('The strand column has an incorrect value' % line)

    # check if all genotypes are correct
    calls.if_all_gt_correct(alleles, line)

    # pseudo phase heterozyous genotypes
    phasedAllesLL = calls.pseudoPhase(alleles)
    phasedAlles = calls.flattenList(a.split('\t') for a in phasedAllesLL)
    HaploAlles = phasedAlles[::2]

    # complement negative strand
    if strand == "-":
      HaploAlles = calls.complementSeq(HaploAlles)

    # output the results
    chrPosRefSP = '\t'.join(str(e) for e in chrPosRefS)
    HaploAllesP = '\t'.join(str(e) for e in HaploAlles)
    outfile.write("%s\t%s\n" % (chrPosRefSP, HaploAllesP))

    # track progress
    counter += 1
    if counter % 1000000 == 0:
      print str(counter), "lines processed"

datafile.close()
outfile.close()
print('\nDone!')